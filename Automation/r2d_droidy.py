import requests
import sys
import json
import time
import os, fnmatch
import hashlib
import xlsxwriter
filepath = 'sha256.txt'

listOfFiles = os.listdir('.')
listOfFiles.sort()
pattern = "*.apk"
timeout = 0
#file_report = "file_report.txt"
file1 = open("r2d_report.txt","w")
file2 = open("droidy_report.txt","w")
apikey = <your VirusTotal API key here>
workbook = xlsxwriter.Workbook('Analysis.xlsx')
worksheet = workbook.add_worksheet()
cell_format = workbook.add_format()
cell_format1 = workbook.add_format()
cell_format1.set_align('left')
cell_format1.set_font_color('green')
cell_format2 = workbook.add_format()
cell_format2.set_align('left')
cell_format2.set_font_color('red')
worksheet.write(1, 1,  "Filename")
worksheet.write(1, 2,  "Package")
worksheet.write(1, 3,  "Min SDK")
worksheet.write(1, 4,  "Target SDK")
worksheet.write(1, 5,  "Main Activity")
worksheet.write(1, 6,  "Sandbox")
worksheet.write(1, 7,  "Executed")
worksheet.write(1, 8,  "activities_started")
worksheet.write(1, 9,  "content_model_observers")
worksheet.write(1, 10,  "services_opened")
worksheet.write(1, 11,  "crypto_plain_text")
worksheet.write(1, 12,  "signals_hooked")
worksheet.write(1, 13,  "invokes")
worksheet.write(1, 14,  "ja3_digests")
worksheet.write(1, 15,  "permissions_checked")
worksheet.write(1, 16,  "modules_loaded")
worksheet.write(1, 17,  "tags")
worksheet.write(1, 18,  "files_written")
worksheet.write(1, 19,  "files_deleted")
worksheet.write(1, 20,  "files_dropped")
worksheet.write(1, 21,  "files_opened")
worksheet.write(1, 22,  "ip_traffic")
worksheet.write(1, 23,  "dns_lookups")
worksheet.write(1, 24,  "http_conversations")
worksheet.write(1, 25,  "shared_preferences_sets")
worksheet.write(1, 26,  "text_highlighted")
row = 3
col = 0
obfus = 1
# For R2DBox result fetching and populating in XML
for entry in listOfFiles:
    if fnmatch.fnmatch(entry, pattern):
            print ("Filename :", entry)
            file1.write("Apk Name = " + entry + "\n")
            
            if obfus == 1:
                cell_format = cell_format1
            else:
                cell_format = cell_format2
                
            worksheet.write(row, 1,  entry)
            worksheet.write(row, 6,  "VirusTotal R2DBox")
            
            with open(entry,"rb") as f:
               bytes = f.read() # read entire file as bytes
               hash_sha = hashlib.sha256(bytes).hexdigest();
               print("computed hash :", hash_sha)
      
            url = 'https://www.virustotal.com/api/v3/file_behaviours/' + hash_sha + '_VirusTotal%20R2DBox'
            response = requests.get(url, headers={"x-apikey":apikey})
            print("Response returned :", response.status_code)
           
            if response.status_code != 200:
                    print("No sandbox execution")
                    file1.write("No sandbox execution" + "\n")
                    worksheet.write(row, 7,  "No")
                    for x in range(8,27):
                             worksheet.write(row, x,  "-", cell_format)
            elif response.status_code == 200:
               file1.write(response.text)
               worksheet.write(row, 7,  "Yes")
               for val in response.json()['data']['attributes']:
                       #if response.json()['data']['attributes'][val] == int:
                            #print("%s: %s" % (val, response.json()['data']['attributes'][val]))
                       #if 'sandbox_name' in response.json()['data']['attributes']:
                       #       worksheet.write(row, 2,  response.json()['data']['attributes']['sandbox_name'])
                       #else:
                       #       worksheet.write(row, 2,  "-")
                       if 'activities_started' in response.json()['data']['attributes']:
                              worksheet.write(row, 8,  len(response.json()['data']['attributes']['activities_started']), cell_format)
                       else:
                              worksheet.write(row, 8,  "-", cell_format)
                       if 'content_model_observers' in response.json()['data']['attributes']:
                              worksheet.write(row, 9,  len(response.json()['data']['attributes']['content_model_observers']), cell_format)
                       else:
                              worksheet.write(row, 9,  "-", cell_format)
                       if 'services_opened' in response.json()['data']['attributes']:
                              worksheet.write(row, 10,  len(response.json()['data']['attributes']['services_opened']), cell_format)
                       else:
                              worksheet.write(row, 10,  "-", cell_format)
                       if 'crypto_plain_text' in response.json()['data']['attributes']:
                              worksheet.write(row, 11,  len(response.json()['data']['attributes']['crypto_plain_text']), cell_format)
                       else:
                              worksheet.write(row, 11,  "-", cell_format)
                       if 'signals_hooked' in response.json()['data']['attributes']:
                              worksheet.write(row, 12,  len(response.json()['data']['attributes']['signals_hooked']), cell_format)
                       else:
                              worksheet.write(row, 12,  "-", cell_format)
                       if 'invokes' in response.json()['data']['attributes']:
                              worksheet.write(row, 13,  len(response.json()['data']['attributes']['invokes']), cell_format)
                       else:
                              worksheet.write(row, 13,  "-", cell_format)
                       if 'ja3_digests' in response.json()['data']['attributes']:
                              worksheet.write(row, 14,  len(response.json()['data']['attributes']['ja3_digests']), cell_format)
                       else:
                              worksheet.write(row, 14,  "-", cell_format)
                       if 'permissions_checked' in response.json()['data']['attributes']:
                              worksheet.write(row, 15,  len(response.json()['data']['attributes']['permissions_checked']), cell_format)
                       else:
                              worksheet.write(row, 15,  "-", cell_format)
                       if 'modules_loaded' in response.json()['data']['attributes']:
                              worksheet.write(row, 16,  len(response.json()['data']['attributes']['modules_loaded']), cell_format)
                       else:
                              worksheet.write(row, 16,  "-", cell_format)
                       if 'tags' in response.json()['data']['attributes']:
                              worksheet.write(row, 17,  len(response.json()['data']['attributes']['tags']), cell_format)
                       else:
                              worksheet.write(row, 17,  "-", cell_format)
                       if 'files_written' in response.json()['data']['attributes']:
                              worksheet.write(row, 18,  len(response.json()['data']['attributes']['files_written']), cell_format)
                       else:
                              worksheet.write(row, 18,  "-", cell_format)
                       if 'files_deleted' in response.json()['data']['attributes']:
                              worksheet.write(row, 19,  len(response.json()['data']['attributes']['files_deleted']), cell_format)
                       else:
                              worksheet.write(row, 19,  "-", cell_format)
                       if 'files_dropped' in response.json()['data']['attributes']:
                              worksheet.write(row, 20,  len(response.json()['data']['attributes']['files_dropped']), cell_format)
                       else:
                              worksheet.write(row, 20,  "-", cell_format)
                       if 'files_opened' in response.json()['data']['attributes']:
                              worksheet.write(row, 21,  len(response.json()['data']['attributes']['files_opened']), cell_format)
                       else:
                              worksheet.write(row, 21,  "-", cell_format)
                       if 'ip_traffic' in response.json()['data']['attributes']:
                              worksheet.write(row, 22,  len(response.json()['data']['attributes']['ip_traffic']), cell_format)
                       else:
                              worksheet.write(row, 22,  "-", cell_format)
                       if 'dns_lookups' in response.json()['data']['attributes']:
                              worksheet.write(row, 23,  len(response.json()['data']['attributes']['dns_lookups']), cell_format)
                       else:
                              worksheet.write(row, 23,  "-", cell_format)
                       if 'http_conversations' in response.json()['data']['attributes']:
                              worksheet.write(row, 24,  len(response.json()['data']['attributes']['http_conversations']), cell_format)
                       else:
                              worksheet.write(row, 24,  "-", cell_format)
                       if 'shared_preferences_sets' in response.json()['data']['attributes']:
                              worksheet.write(row, 25,  len(response.json()['data']['attributes']['shared_preferences_sets']), cell_format)
                       else:
                              worksheet.write(row, 25,  "-", cell_format)
                       if 'text_highlighted' in response.json()['data']['attributes']:
                              worksheet.write(row, 26,  len(response.json()['data']['attributes']['text_highlighted']), cell_format)
                       else:
                              worksheet.write(row, 26,  "-", cell_format)
                       if isinstance(response.json()['data']['attributes'][val], list): 
                            result1 ="   "+ val + ":" + str(len(response.json()['data']['attributes'][val]))
                            file1.write(result1 + "\n")
                       else:
                            result1 ="   "+ val + ":" + str(response.json()['data']['attributes'][val])
                            file1.write(result1 + "\n")
                       #else:
                       #     print("%s: %s" % (val, len(response.json()['data']['attributes'][val])))
                       #     result1 ="   "+ val + ":" + str(len(response.json()['data']['attributes'][val]))
                       #     file1.write(result1 + "\n")
                       #worksheet.write(row, 1,  "Executed")
      
                  
            file1.write("\n")
            if obfus == 1:
                worksheet.write(row, col,  "Non-Obfuscated")
                obfus = obfus + 1
                row=row+1
            elif obfus == 2:
                worksheet.write(row, col,  "Obfuscated")
                obfus = 1
                row=row+16
            #filename= entry+"_BehaviourSummary.txt"
            #f = open(filename, "w")
            #f.write(response.text)
            #f.close()
file1.close()
row = 5      
col = 0
obfus = 1   
# For Droidy result fetching and populating in XML   
for entry in listOfFiles:
    if fnmatch.fnmatch(entry, pattern):
            print ("Filename :", entry)
            file2.write("Apk Name = " + entry + "\n")
            
            if obfus == 1:
                cell_format = cell_format1
            else:
                cell_format = cell_format2
                
            worksheet.write(row, 1,  entry)
            worksheet.write(row, 6,  "VirusTotal Droidy")
            
            with open(entry,"rb") as f:
               bytes = f.read() # read entire file as bytes
               hash_sha = hashlib.sha256(bytes).hexdigest();
               print("computed hash :", hash_sha)
      
            url = 'https://www.virustotal.com/api/v3/file_behaviours/' + hash_sha + '_VirusTotal%20Droidy'
            response = requests.get(url, headers={"x-apikey":apikey})
            print("Response returned :", response.status_code)
            #json_string = json.dumps(response.json(), sort_keys=True, indent=4)
  
            if response.status_code != 200:
                    print("No sandbox execution")
                    file2.write("No sandbox execution" + "\n")
                    worksheet.write(row, 7,  "No")
                    for x in range(8,27):
                             worksheet.write(row, x,  "-", cell_format)
            elif response.status_code == 200:
               file2.write(response.text)
               worksheet.write(row, 7,  "Yes")
               for val in response.json()['data']['attributes']:
                       #if response.json()['data']['attributes'][val] == int:
                            #print("%s: %s" % (val, response.json()['data']['attributes'][val]))
                       #if 'sandbox_name' in response.json()['data']['attributes']:
                       #       worksheet.write(row, 2,  response.json()['data']['attributes']['sandbox_name'])
                       #else:
                       #       worksheet.write(row, 2,  "-")
                       if 'activities_started' in response.json()['data']['attributes']:
                              worksheet.write(row, 8,  len(response.json()['data']['attributes']['activities_started']), cell_format)
                       else:
                              worksheet.write(row, 8,  "-", cell_format)
                       if 'content_model_observers' in response.json()['data']['attributes']:
                              worksheet.write(row, 9,  len(response.json()['data']['attributes']['content_model_observers']), cell_format)
                       else:
                              worksheet.write(row, 9,  "-", cell_format)
                       if 'services_opened' in response.json()['data']['attributes']:
                              worksheet.write(row, 10,  len(response.json()['data']['attributes']['services_opened']), cell_format)
                       else:
                              worksheet.write(row, 10,  "-", cell_format)
                       if 'crypto_plain_text' in response.json()['data']['attributes']:
                              worksheet.write(row, 11,  len(response.json()['data']['attributes']['crypto_plain_text']), cell_format)
                       else:
                              worksheet.write(row, 11,  "-", cell_format)
                       if 'signals_hooked' in response.json()['data']['attributes']:
                              worksheet.write(row, 12,  len(response.json()['data']['attributes']['signals_hooked']), cell_format)
                       else:
                              worksheet.write(row, 12,  "-", cell_format)
                       if 'invokes' in response.json()['data']['attributes']:
                              worksheet.write(row, 13,  len(response.json()['data']['attributes']['invokes']), cell_format)
                       else:
                              worksheet.write(row, 13,  "-", cell_format)
                       if 'ja3_digests' in response.json()['data']['attributes']:
                              worksheet.write(row, 14,  len(response.json()['data']['attributes']['ja3_digests']), cell_format)
                       else:
                              worksheet.write(row, 14,  "-", cell_format)
                       if 'permissions_checked' in response.json()['data']['attributes']:
                              worksheet.write(row, 15,  len(response.json()['data']['attributes']['permissions_checked']), cell_format)
                       else:
                              worksheet.write(row, 15,  "-", cell_format)
                       if 'modules_loaded' in response.json()['data']['attributes']:
                              worksheet.write(row, 16,  len(response.json()['data']['attributes']['modules_loaded']), cell_format)
                       else:
                              worksheet.write(row, 16,  "-", cell_format)
                       if 'tags' in response.json()['data']['attributes']:
                              worksheet.write(row, 17,  len(response.json()['data']['attributes']['tags']), cell_format)
                       else:
                              worksheet.write(row, 17,  "-", cell_format)
                       if 'files_written' in response.json()['data']['attributes']:
                              worksheet.write(row, 18,  len(response.json()['data']['attributes']['files_written']), cell_format)
                       else:
                              worksheet.write(row, 18,  "-", cell_format)
                       if 'files_deleted' in response.json()['data']['attributes']:
                              worksheet.write(row, 19,  len(response.json()['data']['attributes']['files_deleted']), cell_format)
                       else:
                              worksheet.write(row, 19,  "-", cell_format)
                       if 'files_dropped' in response.json()['data']['attributes']:
                              worksheet.write(row, 20,  len(response.json()['data']['attributes']['files_dropped']), cell_format)
                       else:
                              worksheet.write(row, 20,  "-", cell_format)
                       if 'files_opened' in response.json()['data']['attributes']:
                              worksheet.write(row, 21,  len(response.json()['data']['attributes']['files_opened']), cell_format)
                       else:
                              worksheet.write(row, 21,  "-", cell_format)
                       if 'ip_traffic' in response.json()['data']['attributes']:
                              worksheet.write(row, 22,  len(response.json()['data']['attributes']['ip_traffic']), cell_format)
                       else:
                              worksheet.write(row, 22,  "-", cell_format)
                       if 'dns_lookups' in response.json()['data']['attributes']:
                              worksheet.write(row, 23,  len(response.json()['data']['attributes']['dns_lookups']), cell_format)
                       else:
                              worksheet.write(row, 23,  "-", cell_format)
                       if 'http_conversations' in response.json()['data']['attributes']:
                              worksheet.write(row, 24,  len(response.json()['data']['attributes']['http_conversations']), cell_format)
                       else:
                              worksheet.write(row, 24,  "-", cell_format)
                       if 'shared_preferences_sets' in response.json()['data']['attributes']:
                              worksheet.write(row, 25,  len(response.json()['data']['attributes']['shared_preferences_sets']), cell_format)
                       else:
                              worksheet.write(row, 25,  "-", cell_format)
                       if 'text_highlighted' in response.json()['data']['attributes']:
                              worksheet.write(row, 26,  len(response.json()['data']['attributes']['text_highlighted']), cell_format)
                       else:
                              worksheet.write(row, 26,  "-", cell_format)
                       if isinstance(response.json()['data']['attributes'][val], list): 
                            result1 ="   "+ val + ":" + str(len(response.json()['data']['attributes'][val]))
                            file2.write(result1 + "\n")
                       else:
                            result1 ="   "+ val + ":" + str(response.json()['data']['attributes'][val])
                            file2.write(result1 + "\n")
                       #else:
                       #     print("%s: %s" % (val, len(response.json()['data']['attributes'][val])))
                       #     result1 ="   "+ val + ":" + str(len(response.json()['data']['attributes'][val]))
                       #     file1.write(result1 + "\n")
                       #worksheet.write(row, 1,  "Executed")
      
                  
            file2.write("\n")
            if obfus == 1:
                worksheet.write(row, col,  "Non-Obfuscated")
                obfus = obfus + 1
                row=row+1
            elif obfus == 2:
                worksheet.write(row, col,  "Obfuscated")
                obfus = 1
                row=row+16
            #filename= entry+"_BehaviourSummary.txt"
            #f = open(filename, "w")
            #f.write(response.text)
            #f.close()
file2.close()
row = 3
col = 0
row1 = 5
col1 = 0
row2 = 8
col2 = 0
obfus = 1
# For APK details and populating in XML
for entry in listOfFiles:
    if fnmatch.fnmatch(entry, pattern):
            print ("Filename :", entry)

         
            with open(entry,"rb") as f:
               bytes = f.read() # read entire file as bytes
               hash_sha = hashlib.sha256(bytes).hexdigest();
               print("computed hash :", hash_sha)
      
            url = 'https://www.virustotal.com/api/v3/files/' + hash_sha
            response = requests.get(url, headers={"x-apikey":apikey})
            print("Response returned :", response.status_code)
            #json_string = json.dumps(response.json(), sort_keys=True, indent=4)
            
            if response.status_code != 200:
                    for x in range(2,6):
                             worksheet.write(row, x,  "-", cell_format)
            elif response.status_code == 200:
               if 'data' in response.json():
                 if 'attributes' in response.json()['data']:
                   if 'androguard' in response.json()['data']['attributes']:
                     if 'Package' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row, 2,  response.json()['data']['attributes']['androguard']['Package'])
                           print("Package name = ", response.json()['data']['attributes']['androguard']['Package'])
                     else:
                           worksheet.write(row, 2,  "-")
                     if 'MinSdkVersion' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row, 3,  response.json()['data']['attributes']['androguard']['MinSdkVersion'])
                           print("Min SDK = ", response.json()['data']['attributes']['androguard']['MinSdkVersion'])
                     else:
                           worksheet.write(row, 3,  "-")
                     if 'TargetSdkVersion' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row, 4,  response.json()['data']['attributes']['androguard']['TargetSdkVersion'])
                           print("Target SDK = ", response.json()['data']['attributes']['androguard']['TargetSdkVersion'])
                     else: 
                           worksheet.write(row, 4,  "-")
                     if 'main_activity' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row, 5,  response.json()['data']['attributes']['androguard']['main_activity'])
                           print("Main Activity = ", response.json()['data']['attributes']['androguard']['main_activity'])
                     else:
                           worksheet.write(row, 5,  "-")
       
            
            
            if response.status_code != 200:
                    for x in range(2,6):
                             worksheet.write(row1, x,  "-", cell_format)
            elif response.status_code == 200:
               if 'data' in response.json():
                 if 'attributes' in response.json()['data']:
                   if 'androguard' in response.json()['data']['attributes']:
                     if 'Package' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row1, 2,  response.json()['data']['attributes']['androguard']['Package'])
                           print("Package name = ", response.json()['data']['attributes']['androguard']['Package'])
                     else:
                           worksheet.write(row1, 2,  "-")
                     if 'MinSdkVersion' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row1, 3,  response.json()['data']['attributes']['androguard']['MinSdkVersion'])
                           print("Min SDK = ", response.json()['data']['attributes']['androguard']['MinSdkVersion'])
                     else:
                           worksheet.write(row1, 3,  "-")
                     if 'TargetSdkVersion' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row1, 4,  response.json()['data']['attributes']['androguard']['TargetSdkVersion'])
                           print("Target SDK = ", response.json()['data']['attributes']['androguard']['TargetSdkVersion'])
                     else: 
                           worksheet.write(row1, 4,  "-")
                     if 'main_activity' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row1, 5,  response.json()['data']['attributes']['androguard']['main_activity'])
                           print("Main Activity = ", response.json()['data']['attributes']['androguard']['main_activity'])
                     else:
                           worksheet.write(row1, 5,  "-")
          
            
            if response.status_code != 200:
                    for x in range(2,6):
                             worksheet.write(row2, x,  "-", cell_format)
            elif response.status_code == 200:
              if 'data' in response.json():
                 if 'attributes' in response.json()['data']:
                   if 'androguard' in response.json()['data']['attributes']:
                     if 'Package' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row2, 2,  response.json()['data']['attributes']['androguard']['Package'])
                           print("Package name = ", response.json()['data']['attributes']['androguard']['Package'])
                     else:
                           worksheet.write(row2, 2,  "-")
                     if 'MinSdkVersion' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row2, 3,  response.json()['data']['attributes']['androguard']['MinSdkVersion'])
                           print("Min SDK = ", response.json()['data']['attributes']['androguard']['MinSdkVersion'])
                     else:
                           worksheet.write(row2, 3,  "-")
                     if 'TargetSdkVersion' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row2, 4,  response.json()['data']['attributes']['androguard']['TargetSdkVersion'])
                           print("Target SDK = ", response.json()['data']['attributes']['androguard']['TargetSdkVersion'])
                     else: 
                           worksheet.write(row2, 4,  "-")
                     if 'main_activity' in response.json()['data']['attributes']['androguard']:
                           worksheet.write(row2, 5,  response.json()['data']['attributes']['androguard']['main_activity'])
                           print("Main Activity = ", response.json()['data']['attributes']['androguard']['main_activity'])
                     else:
                           worksheet.write(row2, 5,  "-")
       
            if obfus == 1:
                #worksheet.write(row, col,  "Non-Obfuscated")
                obfus = obfus + 1
                row=row+1
                row1=row1+1
                row2=row2+6
            elif obfus == 2:
                #worksheet.write(row, col,  "Obfuscated")
                obfus = 1
                row=row+16
                row1=row1+16
                row2=row2+11

row = 8
names = 2
number = 1
col = 0
obfus = 1
# For Strace results 
col1=["epoll_wait","read","open","close","getpid","ioctl","mprotect","writev","fstat64","clock_gettime","write","sendto","recvfrom","mmap2","dup","munmap","getuid32","fcntl64","gettid","futex","unlink","chmod","access","rename","gettimeofday","fsync","clone","stat64","lstat64","madvise","brk","sigprocmask","nanosleep","pread64","pwrite","epoll_ctl","sched_yield","lseek","fchown32","getpriority","pipe","fork","sendmsg","connect","bind","kill","restart","umask"]
col2=["wait for an I/O event on an epoll file descriptor","read from a file descriptor","open and possibly create a file","close a file descriptor","get process identification","manipulates the underlying device parameters of special files","set protection on a region of memory","set file mode creation mask","get file status","get the current time of a clock","write to a file descriptor","send a short message on a socket","receive a message from a socket","map files or devices into memory","duplicate a file descriptor","new mapping or unmapping files or devices into memory","returns the real user ID of the calling process","manipulate file descriptor","get thread identification","fast user-space locking","call the unlink function to remove the specified file","change permissions of a file","check user's permissions for a file","change the name or location of a file","get or set time","synchronize a file’s state with storage dev","create a child process","get file status","get symbolic link status","give advice about use of memory","change the amount of space allocated for the calling process’s data segment","examine and change blocked signals","high-resolution sleep","read from or write to a file descriptor at a given offset","read from or write to a file descriptor at a given offset","control interface for an epoll file descriptor","yield the processor"," reposition read/write file offset","change ownership of a file","get/set program scheduling priority","create pipe","create a child process","send a message on a socket","initiate a connection on a socket","bind a name to a socket","terminate a process","restart a system call after interruption by a stop signal","set file mode creation mask"]
bold = workbook.add_format({'bold': True})
for entry in listOfFiles:
    if fnmatch.fnmatch(entry, pattern):
            if obfus == 1:
                cell_format = cell_format1
            else:
                cell_format = cell_format2
                
            worksheet.write(row, 1,  entry)
            worksheet.write(row, 6,  "STrace")
            worksheet.write(row, 8,  "Type Of System Call")
            worksheet.write(row+1, 8,  "Description")
            worksheet.write(row+2, 8,  "Frequency")
            worksheet.write(row+3, 8,  "errors")
            worksheet.write(row+4, 8,  "Time Percentage")
            colnum = 9
            for x in col1:
                worksheet.write(row, colnum, x)
                colnum = colnum + 1
            colnum = 9
            for x in col2:
                worksheet.write(row+1, colnum, x)
                colnum = colnum + 1
            #worksheet.write(row, 9,  "read")
            #worksheet.write(row+1, 9,  "File read operation")
            #worksheet.write(row, 10,  "write")
            #worksheet.write(row+1, 10,  "File write operation")
            #worksheet.write(row, 11,  "recvfrom")
            #worksheet.write(row+1, 11,  "Receive from C&C")
            #worksheet.write(row, 12,  "writev")
            #worksheet.write(row+1, 12,  "write operation")
            
            if obfus == 1:
                worksheet.write(row, col,  "Non-Obfuscated")
                str1 = "Apk number = "+ str(number) 
                worksheet.write(names, 0,  str1, bold)
                number=number+1
                obfus = obfus + 1
                row=row+6
            elif obfus == 2:
                worksheet.write(row, col,  "Obfuscated")
                obfus = 1
                row=row+11
                names=names+17
#file1.close()
workbook.close()




